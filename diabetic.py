# -*- coding: utf-8 -*-
"""Diabetic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DlO15XOqVyBvnmZdhdDjqIYuTIXUNiR7

##Loading Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from mlxtend.plotting import plot_decision_regions
import missingno as msno
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn import metrics
from sklearn.metrics import classification_report

diabetes_df = pd.read_csv('diabetes.csv')
diabetes_df.head()

"""###EDA"""

diabetes_df.columns

diabetes_df.shape

diabetes_df.info()

"""##Preprocessing(Handling null values)"""

diabetes_df.isnull().head(5)

diabetes_df.isnull().sum()

diabetes_df_copy = diabetes_df.copy(deep=True)
diabetes_df_copy[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']] = diabetes_df_copy[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']].replace(0, np.NaN)
print(diabetes_df_copy.isnull().sum())

"""##Graphs for visualization"""

pt = diabetes_df.hist(figsize=(20, 20))

plt.subplot(121)
sns.distplot(diabetes_df['Insulin'])
plt.show()

plt.figure(figsize=(12, 10))
p = sns.heatmap(diabetes_df.corr(), annot=True, cmap='RdYlGn')

"""##Model building"""

X = diabetes_df.drop('Outcome', axis=1)
y = diabetes_df['Outcome']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=7)

from sklearn.tree import DecisionTreeClassifier

dtree = DecisionTreeClassifier()
dtree.fit(X_train, y_train)

from sklearn.tree import DecisionTreeClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
import numpy as np

X, y = load_iris(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

dtree = DecisionTreeClassifier()
dtree.fit(X_train, y_train)

logits = dtree.predict_proba(X_test)
def softmax(x):
    e_x = np.exp(x - np.max(x))

activated_output = softmax(logits)
print(activated_output)

"""##Accuracy metrics"""

from sklearn.metrics import accuracy_score, f1_score, roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=7)


model = DecisionTreeClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)

accuracy = accuracy_score(y_test, y_pred)

f1 = f1_score(y_test, y_pred, average='weighted')
roc_auc = roc_auc_score(y_test, y_pred_proba, multi_class='ovr')

print("Accuracy:", accuracy)
print("F1-score:", f1)
print("ROC-AUC score:", roc_auc)